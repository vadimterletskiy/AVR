
test_client.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f1  00800060  00800060  000004b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009db  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000585  00000000  00000000  00001023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a6  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a5  00000000  00000000  000021bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00002962  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	09 c1       	rjmp	.+530    	; 0x21a <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	33 c0       	rjmp	.+102    	; 0x7e <__vector_11>
  18:	77 c0       	rjmp	.+238    	; 0x108 <__vector_12>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	21 e0       	ldi	r18, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 35       	cpi	r26, 0x51	; 81
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	06 d0       	rcall	.+12     	; 0x50 <main>
  44:	fa c1       	rjmp	.+1012   	; 0x43a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <initAll>:
#include "defines.h"
#include "UART/uart.h"
#include "init.h"

void initAll(){
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU));
  48:	85 e0       	ldi	r24, 0x05	; 5
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	82 d0       	rcall	.+260    	; 0x152 <uart_init>
  4e:	08 95       	ret

00000050 <main>:

#include "defines.h"

int main(void)
{
	InitRTOS();
  50:	99 d0       	rcall	.+306    	; 0x184 <InitRTOS>
	RunRTOS();
  52:	ea d1       	rcall	.+980    	; 0x428 <RunRTOS>
	initAll();
  54:	f9 df       	rcall	.-14     	; 0x48 <initAll>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
  56:	9b e0       	ldi	r25, 0x0B	; 11
  58:	88 e1       	ldi	r24, 0x18	; 24
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	f8 94       	cli
  5e:	a8 95       	wdr
  60:	81 bd       	out	0x21, r24	; 33
  62:	0f be       	out	0x3f, r0	; 63
  64:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_120MS);
	SetTask(TaskLedOn);
  66:	89 e3       	ldi	r24, 0x39	; 57
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	af d0       	rcall	.+350    	; 0x1ca <SetTask>
    while (1) 
    {
      wdt_reset();	// Сброс собачьего таймера
  6c:	a8 95       	wdr
      TaskManager();	// Вызов диспетчера
  6e:	af d1       	rcall	.+862    	; 0x3ce <TaskManager>
    }
  70:	fd cf       	rjmp	.-6      	; 0x6c <main+0x1c>

00000072 <TaskLedOn>:
#include "tasks.h"
#include "defines.h"

void TaskLedOn (void)
{
	SetTimerTask(TaskLedOn,10);
  72:	6a e0       	ldi	r22, 0x0A	; 10
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	89 e3       	ldi	r24, 0x39	; 57
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	35 d1       	rcall	.+618    	; 0x2e6 <SetTimerTask>
  7c:	08 95       	ret

0000007e <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	2f 93       	push	r18
  8a:	3f 93       	push	r19
  8c:	4f 93       	push	r20
  8e:	5f 93       	push	r21
  90:	6f 93       	push	r22
  92:	7f 93       	push	r23
  94:	8f 93       	push	r24
  96:	9f 93       	push	r25
  98:	af 93       	push	r26
  9a:	bf 93       	push	r27
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  a0:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
  a2:	8c b1       	in	r24, 0x0c	; 12
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  a4:	e0 91 62 00 	lds	r30, 0x0062
  a8:	ef 5f       	subi	r30, 0xFF	; 255
  aa:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
  ac:	20 91 61 00 	lds	r18, 0x0061
  b0:	e2 17       	cp	r30, r18
  b2:	41 f0       	breq	.+16     	; 0xc4 <__vector_11+0x46>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  b4:	98 71       	andi	r25, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  b6:	e0 93 62 00 	sts	0x0062, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	eb 59       	subi	r30, 0x9B	; 155
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	80 83       	st	Z, r24
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <__vector_11+0x48>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  c4:	92 e0       	ldi	r25, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
  c6:	20 91 60 00 	lds	r18, 0x0060
  ca:	92 2b       	or	r25, r18
  cc:	90 93 60 00 	sts	0x0060, r25
	if (UartRxFunc)
  d0:	20 91 e5 00 	lds	r18, 0x00E5
  d4:	30 91 e6 00 	lds	r19, 0x00E6
  d8:	23 2b       	or	r18, r19
  da:	29 f0       	breq	.+10     	; 0xe6 <__vector_11+0x68>
	{
		UartRxFunc(data);
  dc:	e0 91 e5 00 	lds	r30, 0x00E5
  e0:	f0 91 e6 00 	lds	r31, 0x00E6
  e4:	09 95       	icall
	}
}
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	bf 91       	pop	r27
  ec:	af 91       	pop	r26
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	7f 91       	pop	r23
  f4:	6f 91       	pop	r22
  f6:	5f 91       	pop	r21
  f8:	4f 91       	pop	r20
  fa:	3f 91       	pop	r19
  fc:	2f 91       	pop	r18
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 11a:	90 91 64 00 	lds	r25, 0x0064
 11e:	80 91 63 00 	lds	r24, 0x0063
 122:	98 17       	cp	r25, r24
 124:	61 f0       	breq	.+24     	; 0x13e <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 126:	e0 91 63 00 	lds	r30, 0x0063
 12a:	ef 5f       	subi	r30, 0xFF	; 255
 12c:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 12e:	e0 93 63 00 	sts	0x0063, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	eb 55       	subi	r30, 0x5B	; 91
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	80 81       	ld	r24, Z
 13a:	8c b9       	out	0x0c, r24	; 12
 13c:	01 c0       	rjmp	.+2      	; 0x140 <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 13e:	55 98       	cbi	0x0a, 5	; 10
    }
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 152:	10 92 64 00 	sts	0x0064, r1
    UART_TxTail = 0;
 156:	10 92 63 00 	sts	0x0063, r1
    UART_RxHead = 0;
 15a:	10 92 62 00 	sts	0x0062, r1
    UART_RxTail = 0;
 15e:	10 92 61 00 	sts	0x0061, r1
	UartRxFunc  = 0;
 162:	10 92 e6 00 	sts	0x00E6, r1
 166:	10 92 e5 00 	sts	0x00E5, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 16a:	99 23       	and	r25, r25
 16c:	1c f4       	brge	.+6      	; 0x174 <uart_init+0x22>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 16e:	22 e0       	ldi	r18, 0x02	; 2
 170:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 172:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 174:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 176:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 178:	88 e9       	ldi	r24, 0x98	; 152
 17a:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 17c:	86 e8       	ldi	r24, 0x86	; 134
 17e:	80 bd       	out	0x20, r24	; 32
 180:	08 95       	ret

00000182 <Idle>:
 182:	08 95       	ret

00000184 <InitRTOS>:
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	21 ec       	ldi	r18, 0xC1	; 193
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	e9 5d       	subi	r30, 0xD9	; 217
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	31 83       	std	Z+1, r19	; 0x01
 198:	20 83       	st	Z, r18
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	85 31       	cpi	r24, 0x15	; 21
 19e:	91 05       	cpc	r25, r1
 1a0:	a9 f7       	brne	.-22     	; 0x18c <InitRTOS+0x8>
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	21 ec       	ldi	r18, 0xC1	; 193
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	fc 01       	movw	r30, r24
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e9 51       	subi	r30, 0x19	; 25
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	31 83       	std	Z+1, r19	; 0x01
 1ba:	20 83       	st	Z, r18
 1bc:	13 82       	std	Z+3, r1	; 0x03
 1be:	12 82       	std	Z+2, r1	; 0x02
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	80 31       	cpi	r24, 0x10	; 16
 1c4:	91 05       	cpc	r25, r1
 1c6:	89 f7       	brne	.-30     	; 0x1aa <InitRTOS+0x26>
 1c8:	08 95       	ret

000001ca <SetTask>:
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	07 fe       	sbrs	r0, 7
 1ce:	0c c0       	rjmp	.+24     	; 0x1e8 <SetTask+0x1e>
 1d0:	f8 94       	cli
 1d2:	a1 e0       	ldi	r26, 0x01	; 1
 1d4:	0a c0       	rjmp	.+20     	; 0x1ea <SetTask+0x20>
 1d6:	2f 5f       	subi	r18, 0xFF	; 255
 1d8:	3f 4f       	sbci	r19, 0xFF	; 255
 1da:	25 31       	cpi	r18, 0x15	; 21
 1dc:	31 05       	cpc	r19, r1
 1de:	39 f4       	brne	.+14     	; 0x1ee <SetTask+0x24>
 1e0:	aa 23       	and	r26, r26
 1e2:	d1 f0       	breq	.+52     	; 0x218 <SetTask+0x4e>
 1e4:	78 94       	sei
 1e6:	08 95       	ret
 1e8:	a0 e0       	ldi	r26, 0x00	; 0
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	f9 01       	movw	r30, r18
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	e9 5d       	subi	r30, 0xD9	; 217
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	40 81       	ld	r20, Z
 1fc:	51 81       	ldd	r21, Z+1	; 0x01
 1fe:	41 5c       	subi	r20, 0xC1	; 193
 200:	50 40       	sbci	r21, 0x00	; 0
 202:	49 f7       	brne	.-46     	; 0x1d6 <SetTask+0xc>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	fb 01       	movw	r30, r22
 20a:	e9 5d       	subi	r30, 0xD9	; 217
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	91 83       	std	Z+1, r25	; 0x01
 210:	80 83       	st	Z, r24
 212:	aa 23       	and	r26, r26
 214:	09 f0       	breq	.+2      	; 0x218 <SetTask+0x4e>
 216:	78 94       	sei
 218:	08 95       	ret

0000021a <__vector_3>:
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	4f 93       	push	r20
 232:	5f 93       	push	r21
 234:	6f 93       	push	r22
 236:	7f 93       	push	r23
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
 248:	e1 2c       	mov	r14, r1
 24a:	f1 2c       	mov	r15, r1
 24c:	01 ec       	ldi	r16, 0xC1	; 193
 24e:	10 e0       	ldi	r17, 0x00	; 0
 250:	f7 01       	movw	r30, r14
 252:	d7 01       	movw	r26, r14
 254:	aa 0f       	add	r26, r26
 256:	bb 1f       	adc	r27, r27
 258:	aa 0f       	add	r26, r26
 25a:	bb 1f       	adc	r27, r27
 25c:	a9 51       	subi	r26, 0x19	; 25
 25e:	bf 4f       	sbci	r27, 0xFF	; 255
 260:	8d 91       	ld	r24, X+
 262:	9c 91       	ld	r25, X
 264:	81 5c       	subi	r24, 0xC1	; 193
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	01 f1       	breq	.+64     	; 0x2aa <__vector_3+0x90>
 26a:	d7 01       	movw	r26, r14
 26c:	aa 0f       	add	r26, r26
 26e:	bb 1f       	adc	r27, r27
 270:	aa 0f       	add	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	a9 51       	subi	r26, 0x19	; 25
 276:	bf 4f       	sbci	r27, 0xFF	; 255
 278:	12 96       	adiw	r26, 0x02	; 2
 27a:	8d 91       	ld	r24, X+
 27c:	9c 91       	ld	r25, X
 27e:	13 97       	sbiw	r26, 0x03	; 3
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	39 f0       	breq	.+14     	; 0x292 <__vector_3+0x78>
 284:	fd 01       	movw	r30, r26
 286:	82 81       	ldd	r24, Z+2	; 0x02
 288:	93 81       	ldd	r25, Z+3	; 0x03
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	93 83       	std	Z+3, r25	; 0x03
 28e:	82 83       	std	Z+2, r24	; 0x02
 290:	0c c0       	rjmp	.+24     	; 0x2aa <__vector_3+0x90>
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	ef 01       	movw	r28, r30
 29c:	c9 51       	subi	r28, 0x19	; 25
 29e:	df 4f       	sbci	r29, 0xFF	; 255
 2a0:	88 81       	ld	r24, Y
 2a2:	99 81       	ldd	r25, Y+1	; 0x01
 2a4:	92 df       	rcall	.-220    	; 0x1ca <SetTask>
 2a6:	19 83       	std	Y+1, r17	; 0x01
 2a8:	08 83       	st	Y, r16
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	e8 1a       	sub	r14, r24
 2ae:	f8 0a       	sbc	r15, r24
 2b0:	20 e1       	ldi	r18, 0x10	; 16
 2b2:	e2 16       	cp	r14, r18
 2b4:	f1 04       	cpc	r15, r1
 2b6:	61 f6       	brne	.-104    	; 0x250 <__vector_3+0x36>
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	bf 91       	pop	r27
 2c2:	af 91       	pop	r26
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	7f 91       	pop	r23
 2ca:	6f 91       	pop	r22
 2cc:	5f 91       	pop	r21
 2ce:	4f 91       	pop	r20
 2d0:	3f 91       	pop	r19
 2d2:	2f 91       	pop	r18
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <SetTimerTask>:
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	07 fe       	sbrs	r0, 7
 2ea:	66 c0       	rjmp	.+204    	; 0x3b8 <SetTimerTask+0xd2>
 2ec:	f8 94       	cli
 2ee:	20 91 e7 00 	lds	r18, 0x00E7
 2f2:	30 91 e8 00 	lds	r19, 0x00E8
 2f6:	28 17       	cp	r18, r24
 2f8:	39 07       	cpc	r19, r25
 2fa:	09 f4       	brne	.+2      	; 0x2fe <SetTimerTask+0x18>
 2fc:	53 c0       	rjmp	.+166    	; 0x3a4 <SetTimerTask+0xbe>
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	1b c0       	rjmp	.+54     	; 0x33a <SetTimerTask+0x54>
 304:	f9 01       	movw	r30, r18
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	e9 51       	subi	r30, 0x19	; 25
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	01 90       	ld	r0, Z+
 314:	f0 81       	ld	r31, Z
 316:	e0 2d       	mov	r30, r0
 318:	e8 17       	cp	r30, r24
 31a:	f9 07       	cpc	r31, r25
 31c:	81 f4       	brne	.+32     	; 0x33e <SetTimerTask+0x58>
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	f9 01       	movw	r30, r18
 328:	e9 51       	subi	r30, 0x19	; 25
 32a:	ff 4f       	sbci	r31, 0xFF	; 255
 32c:	73 83       	std	Z+3, r23	; 0x03
 32e:	62 83       	std	Z+2, r22	; 0x02
 330:	45 2b       	or	r20, r21
 332:	09 f4       	brne	.+2      	; 0x336 <SetTimerTask+0x50>
 334:	4b c0       	rjmp	.+150    	; 0x3cc <SetTimerTask+0xe6>
 336:	78 94       	sei
 338:	08 95       	ret
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	2f 5f       	subi	r18, 0xFF	; 255
 340:	3f 4f       	sbci	r19, 0xFF	; 255
 342:	20 31       	cpi	r18, 0x10	; 16
 344:	31 05       	cpc	r19, r1
 346:	f1 f6       	brne	.-68     	; 0x304 <SetTimerTask+0x1e>
 348:	20 91 e7 00 	lds	r18, 0x00E7
 34c:	30 91 e8 00 	lds	r19, 0x00E8
 350:	21 5c       	subi	r18, 0xC1	; 193
 352:	30 40       	sbci	r19, 0x00	; 0
 354:	81 f0       	breq	.+32     	; 0x376 <SetTimerTask+0x90>
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	e9 51       	subi	r30, 0x19	; 25
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	01 90       	ld	r0, Z+
 36a:	f0 81       	ld	r31, Z
 36c:	e0 2d       	mov	r30, r0
 36e:	e1 5c       	subi	r30, 0xC1	; 193
 370:	f0 40       	sbci	r31, 0x00	; 0
 372:	91 f4       	brne	.+36     	; 0x398 <SetTimerTask+0xb2>
 374:	02 c0       	rjmp	.+4      	; 0x37a <SetTimerTask+0x94>
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	22 0f       	add	r18, r18
 37c:	33 1f       	adc	r19, r19
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	f9 01       	movw	r30, r18
 384:	e9 51       	subi	r30, 0x19	; 25
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	91 83       	std	Z+1, r25	; 0x01
 38a:	80 83       	st	Z, r24
 38c:	73 83       	std	Z+3, r23	; 0x03
 38e:	62 83       	std	Z+2, r22	; 0x02
 390:	45 2b       	or	r20, r21
 392:	e1 f0       	breq	.+56     	; 0x3cc <SetTimerTask+0xe6>
 394:	78 94       	sei
 396:	08 95       	ret
 398:	2f 5f       	subi	r18, 0xFF	; 255
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
 39c:	20 31       	cpi	r18, 0x10	; 16
 39e:	31 05       	cpc	r19, r1
 3a0:	e1 f6       	brne	.-72     	; 0x35a <SetTimerTask+0x74>
 3a2:	08 95       	ret
 3a4:	70 93 ea 00 	sts	0x00EA, r23
 3a8:	60 93 e9 00 	sts	0x00E9, r22
 3ac:	c4 cf       	rjmp	.-120    	; 0x336 <SetTimerTask+0x50>
 3ae:	70 93 ea 00 	sts	0x00EA, r23
 3b2:	60 93 e9 00 	sts	0x00E9, r22
 3b6:	08 95       	ret
 3b8:	20 91 e7 00 	lds	r18, 0x00E7
 3bc:	30 91 e8 00 	lds	r19, 0x00E8
 3c0:	28 17       	cp	r18, r24
 3c2:	39 07       	cpc	r19, r25
 3c4:	a1 f3       	breq	.-24     	; 0x3ae <SetTimerTask+0xc8>
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	b7 cf       	rjmp	.-146    	; 0x33a <SetTimerTask+0x54>
 3cc:	08 95       	ret

000003ce <TaskManager>:
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	f8 94       	cli
 3d4:	e0 91 27 01 	lds	r30, 0x0127
 3d8:	f0 91 28 01 	lds	r31, 0x0128
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	e1 3c       	cpi	r30, 0xC1	; 193
 3e0:	f8 07       	cpc	r31, r24
 3e2:	11 f4       	brne	.+4      	; 0x3e8 <TaskManager+0x1a>
 3e4:	78 94       	sei
 3e6:	1d c0       	rjmp	.+58     	; 0x422 <TaskManager+0x54>
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	dc 01       	movw	r26, r24
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	ec 01       	movw	r28, r24
 3f2:	cc 0f       	add	r28, r28
 3f4:	dd 1f       	adc	r29, r29
 3f6:	c9 5d       	subi	r28, 0xD9	; 217
 3f8:	de 4f       	sbci	r29, 0xFE	; 254
 3fa:	28 81       	ld	r18, Y
 3fc:	39 81       	ldd	r19, Y+1	; 0x01
 3fe:	aa 0f       	add	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	a9 5d       	subi	r26, 0xD9	; 217
 404:	be 4f       	sbci	r27, 0xFE	; 254
 406:	11 96       	adiw	r26, 0x01	; 1
 408:	3c 93       	st	X, r19
 40a:	2e 93       	st	-X, r18
 40c:	84 31       	cpi	r24, 0x14	; 20
 40e:	91 05       	cpc	r25, r1
 410:	69 f7       	brne	.-38     	; 0x3ec <TaskManager+0x1e>
 412:	81 ec       	ldi	r24, 0xC1	; 193
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	90 93 50 01 	sts	0x0150, r25
 41a:	80 93 4f 01 	sts	0x014F, r24
 41e:	78 94       	sei
 420:	09 95       	icall
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <RunRTOS>:

//RTOS Запуск системного таймера
inline void RunRTOS (void)
{

	TCCR2 = 1<<WGM21|4<<CS20; 				// Freq = CK/64 - Установить режим и предделитель
 428:	8c e0       	ldi	r24, 0x0C	; 12
 42a:	85 bd       	out	0x25, r24	; 37
											// Автосброс после достижения регистра сравнения
	TCNT2 = 0;								// Установить начальное значение счётчиков
 42c:	14 bc       	out	0x24, r1	; 36
	OCR2  = LO(TimerDivider); 				// Установить значение в регистр сравнения
 42e:	8c ea       	ldi	r24, 0xAC	; 172
 430:	83 bd       	out	0x23, r24	; 35
	TIMSK = 0<<TOIE0|1<<OCF2|0<<TOIE0;		// Разрешаем прерывание RTOS - запуск ОС
 432:	80 e8       	ldi	r24, 0x80	; 128
 434:	89 bf       	out	0x39, r24	; 57

	sei();
 436:	78 94       	sei
 438:	08 95       	ret

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
